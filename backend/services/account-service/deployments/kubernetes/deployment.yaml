# account-service\kubernetes\deployment.yaml
// kubernetes/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: account-service
  namespace: platform
  labels:
    app: account-service
    component: backend
    part-of: russian-steam
spec:
  replicas: 3
  selector:
    matchLabels:
      app: account-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: account-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: account-service
      containers:
      - name: account-service
        image: ${REGISTRY}/account-service:${VERSION}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: grpc
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: APP_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: LOG_LEVEL
        - name: HTTP_PORT
          value: "8080"
        - name: GRPC_PORT
          value: "9090"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: account-service-secrets
              key: DB_PASSWORD
        - name: REDIS_ADDR
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: REDIS_ADDR
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: account-service-secrets
              key: REDIS_PASSWORD
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: KAFKA_BROKERS
        - name: KAFKA_TOPIC
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: KAFKA_TOPIC
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: account-service-secrets
              key: JWT_SECRET
        - name: JAEGER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: account-service-config
              key: JAEGER_ENDPOINT
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: account-service-config
      - name: tmp-volume
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      terminationGracePeriodSeconds: 30
