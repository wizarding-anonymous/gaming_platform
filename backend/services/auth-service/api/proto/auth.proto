// File: api/proto/auth.proto

syntax = "proto3";

package auth;

option go_package = "github.com/your-org/auth-service/api/proto/auth";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Сервис аутентификации и авторизации
service AuthService {
  // Регистрация нового пользователя
  rpc Register(RegisterRequest) returns (RegisterResponse);
  
  // Вход пользователя
  rpc Login(LoginRequest) returns (LoginResponse);
  
  // Выход пользователя
  rpc Logout(LogoutRequest) returns (google.protobuf.Empty);
  
  // Обновление токена доступа
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  
  // Проверка токена
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  
  // Отправка кода подтверждения email
  rpc SendEmailVerification(SendEmailVerificationRequest) returns (google.protobuf.Empty);
  
  // Подтверждение email
  rpc VerifyEmail(VerifyEmailRequest) returns (google.protobuf.Empty);
  
  // Запрос на сброс пароля
  rpc RequestPasswordReset(RequestPasswordResetRequest) returns (google.protobuf.Empty);
  
  // Сброс пароля
  rpc ResetPassword(ResetPasswordRequest) returns (google.protobuf.Empty);
  
  // Изменение пароля
  rpc ChangePassword(ChangePasswordRequest) returns (google.protobuf.Empty);
  
  // Включение двухфакторной аутентификации
  rpc EnableTwoFactor(EnableTwoFactorRequest) returns (EnableTwoFactorResponse);
  
  // Отключение двухфакторной аутентификации
  rpc DisableTwoFactor(DisableTwoFactorRequest) returns (google.protobuf.Empty);
  
  // Проверка кода двухфакторной аутентификации
  rpc VerifyTwoFactorCode(VerifyTwoFactorCodeRequest) returns (VerifyTwoFactorCodeResponse);
  
  // Получение кодов восстановления для двухфакторной аутентификации
  rpc GetRecoveryCodes(GetRecoveryCodesRequest) returns (GetRecoveryCodesResponse);
  
  // Привязка Telegram аккаунта
  rpc LinkTelegramAccount(LinkTelegramAccountRequest) returns (google.protobuf.Empty);
  
  // Отвязка Telegram аккаунта
  rpc UnlinkTelegramAccount(UnlinkTelegramAccountRequest) returns (google.protobuf.Empty);
  
  // Получение информации о текущем пользователе
  rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserResponse);
  
  // Получение активных сессий пользователя
  rpc GetUserSessions(GetUserSessionsRequest) returns (GetUserSessionsResponse);
  
  // Завершение сессии
  rpc TerminateSession(TerminateSessionRequest) returns (google.protobuf.Empty);
  
  // Завершение всех сессий пользователя
  rpc TerminateAllSessions(TerminateAllSessionsRequest) returns (google.protobuf.Empty);
}

// Сервис управления пользователями
service UserService {
  // Получение пользователя по ID
  rpc GetUserByID(GetUserByIDRequest) returns (GetUserResponse);
  
  // Получение пользователя по имени пользователя
  rpc GetUserByUsername(GetUserByUsernameRequest) returns (GetUserResponse);
  
  // Получение пользователя по email
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserResponse);
  
  // Получение списка пользователей
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  
  // Создание пользователя
  rpc CreateUser(CreateUserRequest) returns (GetUserResponse);
  
  // Обновление пользователя
  rpc UpdateUser(UpdateUserRequest) returns (GetUserResponse);
  
  // Удаление пользователя
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);
  
  // Блокировка пользователя
  rpc BlockUser(BlockUserRequest) returns (google.protobuf.Empty);
  
  // Разблокировка пользователя
  rpc UnblockUser(UnblockUserRequest) returns (google.protobuf.Empty);
}

// Сервис управления ролями
service RoleService {
  // Получение роли по ID
  rpc GetRoleByID(GetRoleByIDRequest) returns (GetRoleResponse);
  
  // Получение роли по имени
  rpc GetRoleByName(GetRoleByNameRequest) returns (GetRoleResponse);
  
  // Получение списка ролей
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse);
  
  // Создание роли
  rpc CreateRole(CreateRoleRequest) returns (GetRoleResponse);
  
  // Обновление роли
  rpc UpdateRole(UpdateRoleRequest) returns (GetRoleResponse);
  
  // Удаление роли
  rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty);
  
  // Получение ролей пользователя
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse);
  
  // Назначение роли пользователю
  rpc AssignRoleToUser(AssignRoleToUserRequest) returns (google.protobuf.Empty);
  
  // Удаление роли у пользователя
  rpc RemoveRoleFromUser(RemoveRoleFromUserRequest) returns (google.protobuf.Empty);
  
  // Получение разрешений роли
  rpc GetRolePermissions(GetRolePermissionsRequest) returns (GetRolePermissionsResponse);
  
  // Назначение разрешения роли
  rpc AssignPermissionToRole(AssignPermissionToRoleRequest) returns (google.protobuf.Empty);
  
  // Удаление разрешения у роли
  rpc RemovePermissionFromRole(RemovePermissionFromRoleRequest) returns (google.protobuf.Empty);
}

// Запрос на регистрацию
message RegisterRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

// Ответ на регистрацию
message RegisterResponse {
  User user = 1;
  string access_token = 2;
  string refresh_token = 3;
}

// Запрос на вход
message LoginRequest {
  string username_or_email = 1;
  string password = 2;
  string two_factor_code = 3;
  string recovery_code = 4;
}

// Ответ на вход
message LoginResponse {
  User user = 1;
  string access_token = 2;
  string refresh_token = 3;
  bool two_factor_required = 4;
}

// Запрос на выход
message LogoutRequest {
  string refresh_token = 1;
}

// Запрос на обновление токена
message RefreshTokenRequest {
  string refresh_token = 1;
}

// Ответ на обновление токена
message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
}

// Запрос на проверку токена
message ValidateTokenRequest {
  string token = 1;
}

// Ответ на проверку токена
message ValidateTokenResponse {
  bool valid = 1;
  string user_id = 2;
  repeated string roles = 3;
  repeated string permissions = 4;
}

// Запрос на отправку подтверждения email
message SendEmailVerificationRequest {
  string email = 1;
}

// Запрос на подтверждение email
message VerifyEmailRequest {
  string token = 1;
}

// Запрос на сброс пароля
message RequestPasswordResetRequest {
  string email = 1;
}

// Запрос на изменение пароля после сброса
message ResetPasswordRequest {
  string token = 1;
  string new_password = 2;
}

// Запрос на изменение пароля
message ChangePasswordRequest {
  string user_id = 1;
  string current_password = 2;
  string new_password = 3;
}

// Запрос на включение двухфакторной аутентификации
message EnableTwoFactorRequest {
  string user_id = 1;
}

// Ответ на включение двухфакторной аутентификации
message EnableTwoFactorResponse {
  string secret = 1;
  string qr_code_url = 2;
  repeated string recovery_codes = 3;
}

// Запрос на отключение двухфакторной аутентификации
message DisableTwoFactorRequest {
  string user_id = 1;
  string password = 2;
}

// Запрос на проверку кода двухфакторной аутентификации
message VerifyTwoFactorCodeRequest {
  string user_id = 1;
  string code = 2;
}

// Ответ на проверку кода двухфакторной аутентификации
message VerifyTwoFactorCodeResponse {
  bool valid = 1;
}

// Запрос на получение кодов восстановления
message GetRecoveryCodesRequest {
  string user_id = 1;
  string password = 2;
}

// Ответ на получение кодов восстановления
message GetRecoveryCodesResponse {
  repeated string recovery_codes = 1;
}

// Запрос на привязку Telegram аккаунта
message LinkTelegramAccountRequest {
  string user_id = 1;
  string telegram_id = 2;
}

// Запрос на отвязку Telegram аккаунта
message UnlinkTelegramAccountRequest {
  string user_id = 1;
}

// Запрос на получение текущего пользователя
message GetCurrentUserRequest {
  string token = 1;
}

// Ответ на получение текущего пользователя
message GetCurrentUserResponse {
  User user = 1;
  repeated Role roles = 2;
  repeated Permission permissions = 3;
}

// Запрос на получение сессий пользователя
message GetUserSessionsRequest {
  string user_id = 1;
}

// Ответ на получение сессий пользователя
message GetUserSessionsResponse {
  repeated Session sessions = 1;
}

// Запрос на завершение сессии
message TerminateSessionRequest {
  string session_id = 1;
  string user_id = 2;
}

// Запрос на завершение всех сессий пользователя
message TerminateAllSessionsRequest {
  string user_id = 1;
}

// Запрос на получение пользователя по ID
message GetUserByIDRequest {
  string user_id = 1;
}

// Запрос на получение пользователя по имени пользователя
message GetUserByUsernameRequest {
  string username = 1;
}

// Запрос на получение пользователя по email
message GetUserByEmailRequest {
  string email = 1;
}

// Запрос на получение списка пользователей
message ListUsersRequest {
  int32 page = 1;
  int32 page_size = 2;
  string sort_by = 3;
  bool sort_desc = 4;
  string search = 5;
}

// Ответ на получение списка пользователей
message ListUsersResponse {
  repeated User users = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
  int32 total_pages = 5;
}

// Запрос на создание пользователя
message CreateUserRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  repeated string role_ids = 4;
  bool email_verified = 5;
  bool two_factor_enabled = 6;
}

// Запрос на обновление пользователя
message UpdateUserRequest {
  string user_id = 1;
  string username = 2;
  string email = 3;
  bool email_verified = 4;
  bool two_factor_enabled = 5;
}

// Запрос на удаление пользователя
message DeleteUserRequest {
  string user_id = 1;
}

// Запрос на блокировку пользователя
message BlockUserRequest {
  string user_id = 1;
}

// Запрос на разблокировку пользователя
message UnblockUserRequest {
  string user_id = 1;
}

// Запрос на получение роли по ID
message GetRoleByIDRequest {
  string role_id = 1;
}

// Запрос на получение роли по имени
message GetRoleByNameRequest {
  string name = 1;
}

// Запрос на получение списка ролей
message ListRolesRequest {
  int32 page = 1;
  int32 page_size = 2;
  string sort_by = 3;
  bool sort_desc = 4;
  string search = 5;
}

// Ответ на получение списка ролей
message ListRolesResponse {
  repeated Role roles = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
  int32 total_pages = 5;
}

// Запрос на создание роли
message CreateRoleRequest {
  string name = 1;
  string description = 2;
  repeated string permission_ids = 3;
}

// Запрос на обновление роли
message UpdateRoleRequest {
  string role_id = 1;
  string name = 2;
  string description = 3;
}

// Запрос на удаление роли
message DeleteRoleRequest {
  string role_id = 1;
}

// Запрос на получение ролей пользователя
message GetUserRolesRequest {
  string user_id = 1;
}

// Ответ на получение ролей пользователя
message GetUserRolesResponse {
  repeated Role roles = 1;
}

// Запрос на назначение роли пользователю
message AssignRoleToUserRequest {
  string user_id = 1;
  string role_id = 2;
}

// Запрос на удаление роли у пользователя
message RemoveRoleFromUserRequest {
  string user_id = 1;
  string role_id = 2;
}

// Запрос на получение разрешений роли
message GetRolePermissionsRequest {
  string role_id = 1;
}

// Ответ на получение разрешений роли
message GetRolePermissionsResponse {
  repeated Permission permissions = 1;
}

// Запрос на назначение разрешения роли
message AssignPermissionToRoleRequest {
  string role_id = 1;
  string permission_id = 2;
}

// Запрос на удаление разрешения у роли
message RemovePermissionFromRoleRequest {
  string role_id = 1;
  string permission_id = 2;
}

// Ответ на получение пользователя
message GetUserResponse {
  User user = 1;
}

// Ответ на получение роли
message GetRoleResponse {
  Role role = 1;
}

// Модель пользователя
message User {
  string id = 1;
  string username = 2;
  string email = 3;
  bool email_verified = 4;
  bool two_factor_enabled = 5;
  string telegram_id = 6;
  bool is_blocked = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

// Модель роли
message Role {
  string id = 1;
  string name = 2;
  string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

// Модель разрешения
message Permission {
  string id = 1;
  string name = 2;
  string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

// Модель сессии
message Session {
  string id = 1;
  string user_id = 2;
  string user_agent = 3;
  string ip_address = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  google.protobuf.Timestamp expires_at = 7;
  bool is_active = 8;
}
