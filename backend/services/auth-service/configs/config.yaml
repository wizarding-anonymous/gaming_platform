// File: configs/config.yaml

# Конфигурация микросервиса Auth Service

# Общие настройки приложения
app:
  name: "auth-service"
  version: "1.0.0"
  environment: "production" # production, development, testing
  debug: false
  log_level: "info" # debug, info, warn, error
  log_format: "json" # json, text
  shutdown_timeout: 30s

# Настройки HTTP сервера
http:
  host: "0.0.0.0"
  port: 8080
  read_timeout: 10s
  write_timeout: 10s
  idle_timeout: 60s
  max_header_bytes: 1048576 # 1MB
  cors:
    allowed_origins: ["*"]
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowed_headers: ["Content-Type", "Authorization", "X-Requested-With"]
    allow_credentials: true
    max_age: 86400 # 24 часа

# Настройки gRPC сервера
grpc:
  host: "0.0.0.0"
  port: 9090
  max_connection_idle: 60s
  max_connection_age: 300s
  max_connection_age_grace: 30s
  time: 10s
  timeout: 30s

# Настройки базы данных PostgreSQL
database:
  driver: "postgres"
  host: "postgres"
  port: 5432
  username: "postgres"
  password: "postgres"
  database: "auth_service"
  ssl_mode: "disable"
  max_open_conns: 25
  max_idle_conns: 25
  conn_max_lifetime: 300s
  migrations_dir: "migrations"
  auto_migrate: true

# Настройки Redis
redis:
  host: "redis"
  port: 6379
  password: ""
  db: 0
  pool_size: 10
  min_idle_conns: 5
  dial_timeout: 5s
  read_timeout: 3s
  write_timeout: 3s
  pool_timeout: 5s
  idle_timeout: 60s
  max_retries: 3
  min_retry_backoff: 8ms
  max_retry_backoff: 512ms

# Настройки Kafka
kafka:
  brokers: ["kafka:9092"]
  group_id: "auth-service"
  auto_offset_reset: "earliest"
  enable_auto_commit: true
  auto_commit_interval: 5s
  session_timeout: 30s
  heartbeat_interval: 3s
  max_poll_interval: 300s
  topics:
    user_events: "user-events"
    token_events: "token-events"
    session_events: "session-events"

# Настройки JWT
jwt:
  access_token:
    secret: "your-access-token-secret-key-here"
    expires_in: 15m
  refresh_token:
    secret: "your-refresh-token-secret-key-here"
    expires_in: 720h # 30 дней -> This will become refresh_token_ttl
  email_verification_token: # This is for simple random tokens now, not JWTs. Kept for duration config.
    secret: "your-email-verification-token-secret-key-here" # Not used for simple tokens
    expires_in: 48h # 2 дня
  password_reset_token: # This is for simple random tokens now, not JWTs. Kept for duration config.
    secret: "your-password-reset-token-secret-key-here" # Not used for simple tokens
    expires_in: 24h # 1 день

  # Common JWT settings (used for RS256 and potentially HMAC if still used)
  issuer: "auth-service" # Copied from previous level
  audience: "russian-steam-platform" # Copied from previous level
  access_token_ttl: 15m # New for RS256 access tokens
  refresh_token_ttl: 720h # New for RS256 refresh tokens (opaque value's intended lifespan)

  # RS256 specific settings
  rsa_private_key_pem_file: "configs/keys/dev_private_key.pem" # New
  rsa_public_key_pem_file: "configs/keys/dev_public_key.pem"   # New
  jwks_key_id: "auth-service-dev-key-1" # New

# Настройки Telegram
telegram:
  bot_token: "your-telegram-bot-token-here"
  webhook_url: "https://your-domain.com/api/v1/auth/telegram/webhook"

# Настройки двухфакторной аутентификации
two_factor:
  issuer: "Russian Steam Platform"
  recovery_codes_count: 10

# Настройки Prometheus
prometheus:
  enabled: true
  host: "0.0.0.0"
  port: 9180
  path: "/metrics"

# Настройки Jaeger
jaeger:
  enabled: true
  service_name: "auth-service"
  agent_host: "jaeger"
  agent_port: 6831
  sampler_type: "const"
  sampler_param: 1
  log_spans: true

# Настройки Health Check
health_check:
  enabled: true
  host: "0.0.0.0"
  port: 8081
  path: "/health"
  check_interval: 10s
  timeout: 5s

# Настройки безопасности
security:
  password_hash:
    algorithm: "argon2id"
    memory: 65536
    iterations: 2 # Task spec
    parallelism: 4 # Task spec
    salt_length: 16
    key_length: 32
  lockout: # Added
    max_failed_attempts: 5 # Added
    lockout_duration: 15m
  oauth_state: # Added
    state_secret: "a_very_secure_random_string_for_oauth_state_at_least_32_bytes" # MUST be changed in production
    state_cookie_name: "oauth_state_csrf" # Added
    state_cookie_ttl: 10m # Added (10 minutes)
  rate_limit:
    enabled: true
    requests: 100
    duration: 1m
  ip_whitelist:
    enabled: false
    ips: []
  cors_enabled: true

# Настройки MFA (Multi-Factor Authentication)
mfa:
  totp_issuer_name: "MyPlatformAuth"
  # This key MUST be securely generated and stored (e.g., via Vault, K8s secrets).
  # For dev, this is a placeholder. It should be 64 hex characters for a 32-byte key.
  # Example: openssl rand -hex 32
  totp_secret_encryption_key: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
  totp_backup_code_count: 10

# Настройки OAuth провайдеров
oauth_providers:
  vk:
    client_id: "YOUR_VK_CLIENT_ID_HERE"
    client_secret: "YOUR_VK_CLIENT_SECRET_HERE"
    redirect_url: "http://localhost:8080/api/v1/auth/oauth/vk/callback" # Adjust port/host as needed
    auth_url: "https://oauth.vk.com/authorize"
    token_url: "https://oauth.vk.com/access_token"
    user_info_url: "https://api.vk.com/method/users.get"
    # Example: user_info_url: "https://api.vk.com/method/users.get?v=5.131&fields=id,first_name,last_name,email" (ensure version and fields)
    scopes: ["email", "offline"] # Standard scopes, adjust as needed
  odnoklassniki:
    client_id: "YOUR_OK_CLIENT_ID_HERE" # Often a numerical ID
    client_secret: "YOUR_OK_CLIENT_SECRET_KEY_HERE" # The actual secret key
    redirect_url: "http://localhost:8080/api/v1/auth/oauth/ok/callback"
    auth_url: "https://connect.ok.ru/oauth/authorize"
    token_url: "https://api.ok.ru/oauth/token.do"
    user_info_url: "https://api.ok.ru/fb.do" # Requires params like method=users.getCurrentUser, application_key, sig
    scopes: ["GET_EMAIL", "VALUABLE_ACCESS"] # Standard scopes for OK
    provider_specific:
      public_key: "YOUR_OK_APP_PUBLIC_KEY_HERE" # Odnoklassniki also uses an application public key for some API calls / session validation
  # google:
  #   client_id: "YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com"
  #   client_secret: "YOUR_GOOGLE_CLIENT_SECRET"
  #   redirect_url: "http://localhost:8080/api/v1/auth/oauth/google/callback"
  #   auth_url: "https://accounts.google.com/o/oauth2/v2/auth"
  #   token_url: "https://oauth2.googleapis.com/token"
  #   user_info_url: "https://www.googleapis.com/oauth2/v3/userinfo"
  #   scopes: ["openid", "email", "profile"]
