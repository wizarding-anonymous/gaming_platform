package models

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

// APIKey represents an API key for programmatic access.
// Aligned with the 'api_keys' table in auth_data_model.md.
type APIKey struct {
	ID          uuid.UUID       `json:"id" db:"id"`
	UserID      uuid.UUID       `json:"user_id" db:"user_id"` // User who owns this API key
	Name        string          `json:"name" db:"name"`
	KeyPrefix   string          `json:"key_prefix" db:"key_prefix"`     // A short, unique, non-secret prefix
	KeyHash     string          `json:"-" db:"key_hash"`                // SHA256 hash of the API key's secret part
	Permissions json.RawMessage `json:"permissions,omitempty" db:"permissions"` // JSONB array of permission strings
	ExpiresAt   *time.Time      `json:"expires_at,omitempty" db:"expires_at"`
	CreatedAt   time.Time       `json:"created_at" db:"created_at"`         // Handled by DB default
	LastUsedAt  *time.Time      `json:"last_used_at,omitempty" db:"last_used_at"`
	RevokedAt   *time.Time      `json:"revoked_at,omitempty" db:"revoked_at"`
	UpdatedAt   time.Time       `json:"updated_at" db:"updated_at"`         // Handled by DB trigger
}

// CreateAPIKeyRequest contains data for creating a new API key.
// The actual key value is typically generated by the service and not stored directly.
type CreateAPIKeyRequest struct {
	UserID      uuid.UUID
	Name        string
	KeyPrefix   string          // Generated by service
	KeyHash     string          // Hash of the secret part, generated by service
	Permissions json.RawMessage // e.g., json.Marshal([]string{"read:data", "write:config"})
	ExpiresAt   *time.Time
}

// UpdateAPIKeyRequest contains data for updating an API key's mutable fields.
type UpdateAPIKeyRequest struct {
	Name        *string
	Permissions json.RawMessage
}
