// Package service defines interfaces for core domain services.
// These services encapsulate business logic that is independent of specific
// infrastructure concerns (like database types or HTTP transport).
// They operate on domain models and are used by application services (e.g., AuthService in the parent service package)
// to orchestrate more complex operations.
package service

import (
	"time"
	"github.com/golang-jwt/jwt/v5"
	domainErrors "github.com/your-org/auth-service/internal/domain/errors" // For documenting potential errors
)

// Claims represents the standard JWT claims included in access tokens generated by the service.
// It embeds jwt.RegisteredClaims and adds custom claims specific to the application's needs.
type Claims struct {
	UserID      string   `json:"user_id"`               // Unique identifier of the user.
	Username    string   `json:"username"`              // Username of the user.
	Roles       []string `json:"roles"`                 // List of roles assigned to the user.
	Permissions []string `json:"permissions,omitempty"` // Optional: List of fine-grained permissions. May be omitted if too large or fetched separately.
	SessionID   string   `json:"session_id"`            // Identifier of the session to which this token belongs.
	jwt.RegisteredClaims                                // Standard JWT claims (iss, sub, aud, exp, nbf, iat, jti).
}

// TokenManagementService defines the interface for generating, validating, and managing various types of tokens.
// This includes JWT access tokens, opaque refresh tokens, 2FA challenge tokens, and OAuth state tokens.
// It also provides a method to expose public keys via JWKS.
type TokenManagementService interface {
	// GenerateAccessToken creates a new JWT access token with the specified user details, roles, permissions, and session ID.
	// It returns the signed token string and the claims embedded within the token.
	// Returns an error if token generation fails.
	GenerateAccessToken(userID string, username string, roles []string, permissions []string, sessionID string) (string, *Claims, error)

	// ValidateAccessToken validates the given JWT access token string.
	// It checks the signature, expiry, and other standard claims.
	// Returns the parsed Claims if the token is valid, otherwise returns an error
	// (e.g., domainErrors.ErrInvalidToken, domainErrors.ErrTokenExpired).
	ValidateAccessToken(tokenString string) (*Claims, error)

	// GenerateRefreshTokenValue creates a new cryptographically secure opaque string to be used as a refresh token.
	// This raw value should then be hashed before being stored.
	// Returns the plain refresh token string and an error if generation fails.
	GenerateRefreshTokenValue() (string, error)

	// GetRefreshTokenExpiry returns the configured duration for which refresh tokens are considered valid.
	GetRefreshTokenExpiry() time.Duration

	// GetJWKS returns the JSON Web Key Set (JWKS) for the service.
	// This allows clients and resource servers to fetch public keys for verifying JWT access tokens.
	// The result is a map representation of the JWKS JSON structure.
	// Returns an error if the JWKS cannot be generated or retrieved.
	GetJWKS() (map[string]interface{}, error)

	// Generate2FAChallengeToken creates a short-lived, single-purpose JWT after a user has successfully
	// completed the primary authentication step (e.g., password login) and MFA is required.
	// This token is then used to authorize the subsequent 2FA code verification step.
	// Parameters:
	//  - userID: The ID of the user for whom the challenge is being generated.
	// Returns the signed challenge token string and an error if generation fails.
	Generate2FAChallengeToken(userID string) (string, error)

	// Validate2FAChallengeToken validates the provided 2FA challenge token.
	// It checks the token's signature, expiry, and purpose.
	// If valid, it returns the userID embedded in the token.
	// Returns an error if the token is invalid or expired (e.g., domainErrors.ErrInvalidToken).
	Validate2FAChallengeToken(tokenString string) (userID string, err error)

	// GenerateStateJWT creates a short-lived JWT used to store state information for OAuth 2.0 flows.
	// This token is typically set as an HttpOnly cookie to prevent CSRF attacks during the OAuth callback.
	// Parameters:
	//  - claims: The OAuthStateClaims to be embedded in the token.
	//  - secret: A secret key used for HMAC signing of this state token.
	//  - ttl: The time-to-live for the state token.
	// Returns the signed state token string and an error if generation fails.
	GenerateStateJWT(claims *OAuthStateClaims, secret string, ttl time.Duration) (string, error)

	// ValidateStateJWT validates the OAuth state JWT received from a cookie.
	// It checks the signature (using the provided secret) and expiry.
	// Parameters:
	//  - tokenString: The state token string from the cookie.
	//  - secret: The secret key used for HMAC verification.
	// Returns the parsed OAuthStateClaims if the token is valid, otherwise an error
	// (e.g., domainErrors.ErrInvalidToken, domainErrors.ErrTokenExpired).
	ValidateStateJWT(tokenString string, secret string) (*OAuthStateClaims, error)
}

// ChallengeClaims represents the JWT claims for 2FA challenge tokens.
// These tokens are short-lived and authorize the 2FA verification step.
type ChallengeClaims struct {
	UserID string `json:"user_id"` // The ID of the user for whom the 2FA challenge is intended.
	jwt.RegisteredClaims          // Standard JWT claims (e.g., exp, iat).
}

// OAuthStateClaims represents the JWT claims embedded within an OAuth state token (typically stored in a cookie).
// This helps maintain state and protect against CSRF attacks during OAuth 2.0 authorization code grant flows.
type OAuthStateClaims struct {
	ProviderName            string `json:"provider_name"`            // The name of the OAuth provider (e.g., "google", "vk").
	ClientProvidedRedirectURI string `json:"client_redirect_uri,omitempty"` // Optional: The redirect URI originally requested by the client application.
	ClientProvidedState     string `json:"client_state,omitempty"`      // Optional: The state parameter originally provided by the client application.
	CSRFToken               string `json:"csrf_token"`                // A randomly generated token used to correlate the callback request with the initial request, preventing CSRF.
	jwt.RegisteredClaims                                             // Standard JWT claims (e.g., exp, iat).
}
